{"version":3,"file":"static/js/450.9bd63f21.chunk.js","mappings":"iUAEaA,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,EAMtBC,EAAsB,SAAAH,GAAK,OAAIA,EAAMC,SAASC,KAAnB,EAG3BE,EAAwB,SAAAJ,GAAK,OAAIA,EAAMK,MAAV,EAE7BC,GAAuBC,EAAAA,EAAAA,IAClC,CAACR,EAAgBK,IACjB,SAACH,EAAUO,GACT,OAAOP,EAASI,QAAO,qBAAGI,KACnBC,cAAcC,SAASH,EAAeE,cADtB,GAGxB,I,IAGiCH,EAAAA,EAAAA,IAClC,CAACR,EAAgB,SAACa,EAAGC,GAAJ,OAAcA,EAAMC,EAApB,IACjB,SAACb,EAAUa,GACT,OAAOb,EAASc,MAAK,SAAAC,GAAO,OAAIA,EAAQF,KAAOA,CAAnB,GAC7B,I,kBClBGG,EAAyBC,EAAAA,GAAAA,IAAH,uLAStBC,EAAqBD,EAAAA,GAAAA,GAAH,sEAKlBE,EAAgBF,EAAAA,GAAAA,IAAH,6FAMbG,EAAYH,EAAAA,GAAAA,IAAH,2CAITI,GAAaJ,EAAAA,EAAAA,IAAOK,EAAAA,GAAPL,CAAH,+JASVM,GAAmBN,EAAAA,EAAAA,IAAOO,EAAAA,GAAPP,CAAH,uCAIhBQ,EAAmBR,EAAAA,GAAAA,OAAH,0KAUhBS,EAAmBC,EAAAA,GAAW,CAClCnB,KAAMmB,EAAAA,KACHC,QAAQ,gBAAiB,qBACzBC,SAAS,oBACZC,OAAQH,EAAAA,KACLC,QAAQ,QAAS,uBACjBC,SAAS,wBAGDE,EAAgB,WAC3B,IAAMC,GAAWC,EAAAA,EAAAA,MACXjC,GAAWkC,EAAAA,EAAAA,IAAYhC,GAEvBiC,EAAY,mCAAG,WAAOC,EAAP,iFAAiBC,EAAjB,EAAiBA,UAC5B7B,EAAiB4B,EAAjB5B,KAAMsB,EAAWM,EAAXN,QAEVtB,IAAQsB,EAHO,qBAIU9B,EAASsC,MAClC,SAACvB,GAAD,OAAaA,EAAQP,KAAKC,gBAAkBD,EAAKC,aAAjD,IALe,uBASf8B,MAAM,8CATS,oDAcTP,GAASQ,EAAAA,EAAAA,IAAc,CAAEhC,KAAAA,EAAMsB,OAAAA,KAdtB,QAefO,IAfe,kDAiBfE,MAAM,+CAjBS,gCAoBjBA,MAAM,kCApBW,0DAAH,wDAwBlB,OACE,UAACvB,EAAD,YACE,SAACE,EAAD,8BACA,SAAC,KAAD,CACEuB,cAAe,CAAEjC,KAAM,GAAIsB,OAAQ,IACnCJ,iBAAkBA,EAClBgB,SAAUP,EAHZ,SAKG,gBAAGQ,EAAH,EAAGA,aAAH,OACC,SAACxB,EAAD,WACE,UAAC,KAAD,YACE,UAACC,EAAD,YACE,qCACA,SAACC,EAAD,CAAYuB,KAAK,OAAOpC,KAAK,OAAOqC,YAAY,UAChD,SAACtB,EAAD,CAAkBf,KAAK,aAEzB,UAACY,EAAD,YACE,uCACA,SAACC,EAAD,CAAYuB,KAAK,OAAOpC,KAAK,SAASqC,YAAY,YAClD,SAACtB,EAAD,CAAkBf,KAAK,eAEzB,SAACiB,EAAD,CAAkBmB,KAAK,SAASE,SAAUH,EAA1C,SACGA,EAAe,YAAc,oBAdrC,MAsBR,ECpHKI,EAAgB9B,EAAAA,GAAAA,GAAH,+GAOb+B,EAAW/B,EAAAA,GAAAA,GAAH,gVAiBRgC,EAAchC,EAAAA,GAAAA,IAAH,4BAIXiC,EAAcjC,EAAAA,GAAAA,EAAH,kDAMXkC,EAAgBlC,EAAAA,GAAAA,EAAH,gCAKbmC,EAAenC,EAAAA,GAAAA,OAAH,kQAcLoC,EAAc,WACzB,IAAMrD,GAAWkC,EAAAA,EAAAA,IAAY7B,GACvB2B,GAAWC,EAAAA,EAAAA,MAMjB,OACE,SAACc,EAAD,UACG/C,EAASsD,KAAI,gBAAGzC,EAAH,EAAGA,GAAIL,EAAP,EAAOA,KAAMsB,EAAb,EAAaA,OAAb,OACZ,UAACkB,EAAD,YACE,UAACC,EAAD,YACE,SAACC,EAAD,UAAc1C,KACd,SAAC2C,EAAD,UAAgBrB,QAElB,SAACsB,EAAD,CAAcG,QAAS,kBAZH,SAAC1C,GAC3BmB,GAASwB,EAAAA,EAAAA,IAAc3C,GACxB,CAUoC4C,CAAoB5C,EAA1B,EAAvB,sBALaA,EADH,KAWnB,E,WC1EK6C,GAAkBzC,EAAAA,GAAAA,IAAH,6MAUf0C,GAAc1C,EAAAA,GAAAA,MAAH,6GAOX2C,GAAc3C,EAAAA,GAAAA,MAAH,kIASX4C,GAAa5C,EAAAA,GAAAA,KAAH,0GAOH6C,GAAS,WACpB,IAAMvD,GAAiB2B,EAAAA,EAAAA,IAAY/B,GAC7B6B,GAAWC,EAAAA,EAAAA,MAUjB,OACE,UAACyB,GAAD,YACE,SAACC,GAAD,+BACA,SAACC,GAAD,CACEf,YAAY,YACZrC,KAAK,SACLuD,MAAOxD,EACPyD,SAfqB,SAACC,GAC1BjC,GAASkC,EAAAA,GAAAA,GAAeD,EAAEE,cAAcJ,OACzC,IAeIxD,IACC,SAACsD,GAAD,CAAYN,QAdQ,WACxBvB,GAASkC,EAAAA,GAAAA,GAAe,IACzB,EAYK,sBAIP,ECzDKE,GAAYnD,EAAAA,GAAAA,IAAH,qLAUToD,GAAQpD,EAAAA,GAAAA,GAAH,+DAKI,SAASqD,KACtB,IAAMtC,GAAWC,EAAAA,EAAAA,MAMjB,OAJAsC,EAAAA,EAAAA,YAAU,WACRvC,GAASwC,EAAAA,EAAAA,MACV,GAAE,CAACxC,KAGF,UAACoC,GAAD,YACE,SAACC,GAAD,6BACA,SAACP,GAAD,KACA,SAAC/B,EAAD,KACA,SAACsB,EAAD,MAGL,C","sources":["redux/contacts/selectors.js","components/ContactEdit/ContactEdit.js","components/Contacts/Contacts.js","components/Filter/Filter.js","pages/Contacts.js"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectTotalContacts = state => state.contacts.items;\n\n\nexport const selectFilteredContact = state => state.filter;\n\nexport const selectFilteredByName = createSelector(\n  [selectContacts, selectFilteredContact],\n  (contacts, nameFromFilter) => {\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(nameFromFilter.toLowerCase())\n    );\n  }\n);\n\nexport const selectCurrentContact = createSelector(\n  [selectContacts, (_, props) => props.id],\n  (contacts, id) => {\n    return contacts.find(contact => contact.id === id);\n  }\n);","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addNewContact } from 'redux/contacts/thunk';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { selectTotalContacts } from 'redux/contacts/selectors';\nimport styled from 'styled-components';\n\nconst ContactEditorContainer = styled.div`\n  background-color: #4169E1; \n  color: #FFDAB9;\n  padding: 40px;\n  border-radius: 20px;\n  box-shadow: 0 0 20px rgba(0, 0, 0, 0.3);\n  text-align: center;\n`;\n\nconst ContactEditorTitle = styled.h1`\n  font-size: 2.5rem;\n  margin-bottom: 20px;\n`;\n\nconst FormContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst FormField = styled.div`\n  margin: 10px 0;\n`;\n\nconst InputField = styled(Field)`\n  background-color: #f0f0f0; \n  border: 1px solid #ccc;\n  border-radius: 5px;\n  padding: 10px;\n  font-size: 16px;\n  width: 100%;\n`;\n\nconst ErrorMessageText = styled(ErrorMessage)`\n  color: red;\n`;\n\nconst AddContactButton = styled.button`\n  background-color: #ff5733; \n  color: white;\n  border: none;\n  border-radius: 5px;\n  padding: 10px;\n  cursor: pointer;\n  font-size: 16px;\n`;\n\nconst validationSchema = Yup.object({\n  name: Yup.string()\n    .matches(/^[A-Za-z\\s]+$/, 'Name is not valid')\n    .required('Name is required'),\n  number: Yup.string()\n    .matches(/^\\d+$/, 'Number is not valid')\n    .required('Number is required'),\n});\n\nexport const ContactEditor = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectTotalContacts);\n\n  const handleSubmit = async (values, { resetForm }) => {\n    const { name, number } = values;\n\n    if (name && number) {\n      const isNameAlreadyTaken = contacts.some(\n        (contact) => contact.name.toLowerCase() === name.toLowerCase()\n      );\n\n      if (isNameAlreadyTaken) {\n        alert('Contact with the same name already exists.');\n        return;\n      }\n\n      try {\n        await dispatch(addNewContact({ name, number }));\n        resetForm();\n      } catch (error) {\n        alert('An error occurred while adding the contact.');\n      }\n    } else {\n      alert('Enter a valid Name and Number.');\n    }\n  };\n\n  return (\n    <ContactEditorContainer>\n      <ContactEditorTitle>Contact Editor</ContactEditorTitle>\n      <Formik\n        initialValues={{ name: '', number: '' }}\n        validationSchema={validationSchema}\n        onSubmit={handleSubmit}\n      >\n        {({ isSubmitting }) => (\n          <FormContainer>\n            <Form>\n              <FormField>\n                <label>Name</label>\n                <InputField type=\"text\" name=\"name\" placeholder=\"Name\" />\n                <ErrorMessageText name=\"name\" />\n              </FormField>\n              <FormField>\n                <label>Number</label>\n                <InputField type=\"text\" name=\"number\" placeholder=\"Number\" />\n                <ErrorMessageText name=\"number\" />\n              </FormField>\n              <AddContactButton type=\"submit\" disabled={isSubmitting}>\n                {isSubmitting ? 'Adding...' : 'Add Contact'}\n              </AddContactButton>\n            </Form>\n          </FormContainer>\n        )}\n      </Formik>\n    </ContactEditorContainer>\n  );\n};\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { removeContact } from '../../redux/contacts/thunk';\nimport { selectFilteredByName } from '../../redux/contacts/selectors';\nimport styled from 'styled-components';\n\nconst ListContainer = styled.ul`\n  list-style-type: none;\n  padding: 10px;\n  max-width: 800px;\n  margin: 10px auto;\n`;\n\nconst ListItem = styled.li`\n  display: flex;\n  flex-direction:row;\n  justify-content: space-between;\n  align-items: center;\n  background: #333; \n  color: #fff; \n  padding: 20px;\n  border: 1px solid #444; \n  border-radius: 5px;\n  margin-bottom: 20px;\n  transition: background-color 0.3s;\n  &:hover {\n    background: #444; \n  }\n`;\n\nconst ContactInfo = styled.div`\n  \n`;\n\nconst ContactName = styled.p`\n  font-weight: bold;\n\n\n`;\n\nconst ContactNumber = styled.p`\n  \n  \n`;\n\nconst DeleteButton = styled.button`\n  background-color: #ff5733;\n  margin-left: 20px;\n  color: #fff; \n  border: none;\n  border-radius: 5px;\n  padding: 5px 10px;\n  cursor: pointer;\n  transition: background-color 0.3s;\n  &:hover {\n    background: #ff4500; \n  }\n`;\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectFilteredByName);\n  const dispatch = useDispatch();\n\n  const handleDeleteContact = (id) => {\n    dispatch(removeContact(id));\n  };\n\n  return (\n    <ListContainer>\n      {contacts.map(({ id, name, number }) => (\n        <ListItem key={id}>\n          <ContactInfo>\n            <ContactName>{name}</ContactName>\n            <ContactNumber>{number}</ContactNumber>\n          </ContactInfo>\n          <DeleteButton onClick={() => handleDeleteContact(id)}>Delete</DeleteButton>\n        </ListItem>\n      ))}\n    </ListContainer>\n  );\n};\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { contactsFilter } from '../../redux/contacts/filterSlice';\nimport { selectFilteredContact } from '../../redux/contacts/selectors';\nimport styled from 'styled-components';\n\nconst FilterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  background-color:#4169E1; \n  border-radius: 8px;\n  padding: 10px;\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n  margin-bottom:20px;\n`;\n\nconst FilterLabel = styled.label`\n  margin-right: 10px;\n  color: #FFDAB9; \n  font-weight: bold;\n  font-size: 14px;\n`;\n\nconst FilterInput = styled.input`\n  flex: 1;\n  border: none;\n  border-radius: 5px;\n  padding: 8px;\n  font-size: 16px;\n  color: #333; \n`;\n\nconst FilterIcon = styled.span`\n  font-size: 24px;\n  color: ##FFDAB9; \n  cursor: pointer;\n  margin-left:10px;\n`;\n\nexport const Filter = () => {\n  const nameFromFilter = useSelector(selectFilteredContact);\n  const dispatch = useDispatch();\n\n  const handleFilterChange = (e) => {\n    dispatch(contactsFilter(e.currentTarget.value));\n  };\n\n  const handleClearFilter = () => {\n    dispatch(contactsFilter(''));\n  };\n\n  return (\n    <FilterContainer>\n      <FilterLabel>Filter by Name:</FilterLabel>\n      <FilterInput\n        placeholder=\"Search...\"\n        name=\"filter\"\n        value={nameFromFilter}\n        onChange={handleFilterChange}\n      />\n      {nameFromFilter && (\n        <FilterIcon onClick={handleClearFilter}>✕</FilterIcon>\n      )}\n    </FilterContainer>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { getAllContactsThunk } from 'redux/contacts/thunk';\nimport { ContactEditor } from 'components/ContactEdit/ContactEdit';\nimport { ContactList } from 'components/Contacts/Contacts';\nimport { Filter } from 'components/Filter/Filter';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n  background: #28211c;\n  color: #c2bf98;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n`;\n\nconst Title = styled.h1`\n  font-size: 36px;\n  margin: 20px 0;\n`;\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getAllContactsThunk());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <Title>Your contacts</Title>\n      <Filter />\n      <ContactEditor />\n      <ContactList />\n    </Container>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectTotalContacts","selectFilteredContact","filter","selectFilteredByName","createSelector","nameFromFilter","name","toLowerCase","includes","_","props","id","find","contact","ContactEditorContainer","styled","ContactEditorTitle","FormContainer","FormField","InputField","Field","ErrorMessageText","ErrorMessage","AddContactButton","validationSchema","Yup","matches","required","number","ContactEditor","dispatch","useDispatch","useSelector","handleSubmit","values","resetForm","some","alert","addNewContact","initialValues","onSubmit","isSubmitting","type","placeholder","disabled","ListContainer","ListItem","ContactInfo","ContactName","ContactNumber","DeleteButton","ContactList","map","onClick","removeContact","handleDeleteContact","FilterContainer","FilterLabel","FilterInput","FilterIcon","Filter","value","onChange","e","contactsFilter","currentTarget","Container","Title","Contacts","useEffect","getAllContactsThunk"],"sourceRoot":""}